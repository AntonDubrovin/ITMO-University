type: edu
files:
- name: test/Tests.kt
  visible: false
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1

    import org.junit.Assert
    import org.junit.Test
    import java.io.ByteArrayOutputStream
    import java.io.PrintStream

    class Test {
        companion object {
            val newline = System.getProperty("line.separator")
        }

        private fun testStdout(expected: String, fn: () -> Unit) {
            val oldStdOut = System.out
            try {
                val stream = ByteArrayOutputStream()
                stream.use {
                    PrintStream(stream, true, "UTF-8").use { System.setOut(it); fn(); }
                }
                val actual = stream.toByteArray().inputStream().bufferedReader().readText()
                Assert.assertEquals(expected, actual)
            } finally {
                System.setOut(oldStdOut)
            }
        }

        @Test
        fun testGreet() {
            listOf("abc", "", "=123", "John Doe", "One, two, three").forEach {
                testStdout("Hello, $it!$newline") { greet(it) }
            }
        }

        @Test
        fun testSolutionNoUsername() {
            testStdout("Hello, world!$newline") { main(arrayOf()) }
        }

        @Test
        fun testSolutionWithArgs() {
            testStdout("Hello, one!${newline}Hello, two!${newline}Hello, three!$newline") {
                main(arrayOf("one", "two", "three"))
            }
        }
    }
  learner_created: false
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 239
    length: 24
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 239
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: TODO()
  - offset: 509
    length: 69
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 494
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: TODO()
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1

    fun greet(name: String) {
        /*
         * Напишите тело функции, выводящее приветствие в виде:
         * "Hello, NAME!" без кавычек, подставляя вместо "NAME"
         * переданную строку.
         */
        type here
    }

    fun main(args: Array<String>) {
        /*
         * Вызовите функцию greet для каждого
         * аргумента командной строки или же, если не
         * передано ни одного аргумента, вызовите greet один
         * раз, чтобы вывести "Hello, world!"
         */
        type here
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 18 Sep 2021 15:40:04 UTC
record: -1
