type: edu
files:
- name: test/Tests.kt
  visible: false
  text: |-
    import com.h0tk3y.spbsu.kotlin.course.lesson1.cut
    import com.h0tk3y.spbsu.kotlin.course.lesson1.intersectRanges
    import com.h0tk3y.spbsu.kotlin.course.lesson1.test.cut as referenceCut
    import com.h0tk3y.spbsu.kotlin.course.lesson1.test.intersectRanges as referenceIntersect
    import org.junit.Assert
    import org.junit.Test

    class Test {
        @Test
        fun testIntersect() {
            fun doTest(rangeA: IntRange, rangeB: IntRange) {
                val expected = referenceIntersect(rangeA, rangeB)
                val actual = intersectRanges(rangeA, rangeB)
                Assert.assertEquals(
                        "Intersection of $rangeA and $rangeB should be $expected, but was $actual.",
                        expected,
                        actual
                )
            }

            doTest(0..0, 1..1)
            doTest(1..1, 0..0)
            doTest(0..5, 1..5)
            doTest(0..5, 0..4)
            doTest(0..5, 5..10)
            doTest(0..5, -10..0)
            doTest(0..5, 3..10)
            doTest(0..5, -5..3)
        }

        @Test
        fun testCut() {
            fun doTest(rangeA: IntRange, rangeB: IntRange) {
                val expected = referenceCut(rangeA, rangeB)
                val actual = cut(rangeA, rangeB)
                Assert.assertEquals(
                        "cut($rangeA, $rangeB) should be $expected, but was $actual.",
                        expected,
                        actual
                )
            }

            doTest(0..0, 1..1)
            doTest(1..1, 0..0)
            doTest(0..5, 1..5)
            doTest(0..5, 0..4)
            doTest(0..5, 5..10)
            doTest(0..5, -10..0)
            doTest(0..5, 3..10)
            doTest(0..5, -5..3)
        }


    }
  learner_created: false
- name: test/ReferenceImpl.kt
  visible: true
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1.test

    fun intersectRanges(rangeA: IntRange, rangeB: IntRange): IntRange? {
        val left = if (rangeA.first <= rangeB.first) rangeA else rangeB
        val right = if (left === rangeA) rangeB else rangeA

        if (left.last < right.first)
            return null

        if (left.last > right.last)
            return right

        return right.first..left.last
    }

    fun cut(outerRange: IntRange, cutout: IntRange): List<IntRange> {
        val intersection = intersectRanges(outerRange, cutout)
        return when {
            intersection == null -> listOf(outerRange)
            intersection == outerRange -> emptyList()
            else -> listOfNotNull(
                outerRange.first until intersection.first,
                (intersection.last + 1)..outerRange.last
            ).filter { !it.isEmpty() }
        }
    }
  learner_created: false
- name: src/Task.kt
  visible: true
  text: "package com.h0tk3y.spbsu.kotlin.course.lesson1\n\n/*\n * Реализуйте функц\
    ию intersectRanges, возвращающую диапазон, являющийся пересечением двух\n * да\
    нных целочисленных диапазонов. Если данные диапазоны не пересекаются, возвраща\
    йте null.\n *\n * Например, пересечением дипазонов `1..10` и `5..20` является\
    \ `5..10`,\n * а диапазоны `0..0` и `1..1` не пересекаются.\n * \n * Для получ\
    ения границ диапазонов используйте свойства `first` и `last`.\n */\nfun intersectRanges(rangeA:\
    \ IntRange, rangeB: IntRange): IntRange? {\n    TODO()\n}\n\n/*\n * Реализуйте\
    \ функцию `cut`, которая возвращает список, содержащий от нуля до двух непреры\
    вных\n * диапазонов, которые получаются из диапазона `outerRange`, если из нег\
    о \"вырезать\" диапазон `cutout`.\n * (на самом деле, конечно же, \"вырезать\"\
    \ из диапазона можно только его пересечение с другим диапазоном,\n *  а осталь\
    ную часть другого диапазона следует отбросить)\n * \n * Например, если из диап\
    азона `0..10` вырезать `1..7`, получится два диапазона, `0..0` и `8..10`.\n *\
    \ Если же из `0..10` вырезать `0..3`, то результатом будет только один диапазо\
    н `4..10`.\n */\nfun cut(outerRange: IntRange, cutout: IntRange): List<IntRange>\
    \ {\n    val result = mutableListOf<IntRange>()\n    TODO(\n            \"Доба\
    вьте в result необходимые элементы с помощью .add(...), затем верните result;\
    \ \" +\n                    \"или создайте список-результат другим способом\"\n\
    \    )\n}"
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 19 Sep 2021 11:43:20 UTC
record: -1
