type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 283
    length: 73
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 283
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: TODO()
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1

    /*
     * Реализуйте функцию factorial, вычисляющую значение факториала. Значение факториала нуля считайте едииницей.
     * Факториалом отрицательных чисел считайте -1. Целочисленное переполнение игнорируйте.
     */
    fun factorial(n: Int): Int = type here
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1

    import org.junit.Assert
    import org.junit.Test

    class Test {
        private fun doTest(expected: Int, n: Int) {
            try {
                val actual = factorial(n)
                Assert.assertEquals("factorial($n) should be $expected, but was $actual", expected, actual)
            } catch (e: StackOverflowError) {
                Assert.fail("Stack overflow in factorial($n).")
            }
        }

        @Test
        fun testFactorial() {
            Assert.assertEquals(-1, factorial(-123))
            Assert.assertEquals(-1, factorial(-1))
            Assert.assertEquals(1, factorial(0))
            var res = 1
            for (i in 1..10) {
                res *= i
                Assert.assertEquals(res, factorial(i))
            }
        }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 18 Sep 2021 15:41:23 UTC
record: -1
