type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 533
    length: 215
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 537
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: TODO()
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1

    /*
     * Реализуйте функцию fizzbuzz, принимающую целочисленный диапазон и выводящую на каждый элемент диапазона
     * по одной строке в консоль. Для чисел в диапазоне, кратных трём, выводите слово fizz, для кратных пяти –
     * слово buzz, а для кратных 15-и (то есть кратных и трём, и пяти) – слово fizzbuzz.
     * Для остальных чисел выводите их строковое представление.
     *
     * Пример вывода для диапазона 10..15: *//*
      buzz
      11
      fizz
      13
      14
      fizzbuzz
     */
    fun fizzbuzz(range: IntRange) {
        type here
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1

    import org.junit.Assert
    import org.junit.Test
    import java.io.ByteArrayOutputStream
    import java.io.PrintStream

    class Test {
        companion object {
            val newline = System.getProperty("line.separator")
        }

        private fun testStdout(expected: String, fn: () -> Unit) {
            val oldStdOut = System.out
            try {
                val stream = ByteArrayOutputStream()
                stream.use {
                    PrintStream(stream, true, "UTF-8").use { System.setOut(it); fn(); }
                }
                val actual = stream.toByteArray().inputStream().bufferedReader().readText()
                Assert.assertEquals(expected, actual)
            } finally {
                System.setOut(oldStdOut)
            }
        }

        @Test
        fun testFizzBuzz() {
            listOf(1..30, 10..200, -5..300).forEach { range ->
                testStdout(range.joinToString(newline, "", newline, transform = {
                    when {
                        it % 15 == 0 -> "fizzbuzz"
                        it % 5 == 0 -> "buzz"
                        it % 3 == 0 -> "fizz"
                        else -> it.toString()
                    }
                })) {
                    fizzbuzz(range)
                }
            }
        }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 18 Sep 2021 15:53:18 UTC
record: -1
